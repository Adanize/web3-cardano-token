{"version":3,"sources":["webpack://web3-cardano-token/./node_modules/emurgo-message-signing/emurgo_message_signing_bg.js","webpack://web3-cardano-token/./node_modules/emurgo-message-signing/emurgo_message_signing.js","webpack://web3-cardano-token/(webpack)/buildin/harmony-module.js"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;;AAEzD;;AAEA;;AAEA,yBAAyB,kBAAkB;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mDAAmD,+BAA+B;;AAElF;;AAEA;AACA;AACA,yEAAyE,+EAAW;AACpF,8CAA8C,+EAAW;AACzD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,IAAI,YAAY,IAAI,UAAU;AACzD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,UAAU,cAAc;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,+EAAW;AACpF,8CAA8C,+EAAW;AACzD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,+EAAW;AACxF,kDAAkD,+EAAW;AAC7D;AACA;AACA;AACA;AACA;AACO,iCAAiC,qCAAqC;AAC7E;AACA;AACO,yCAAyC,yDAAyD;AACzG;AACA;AACO,kCAAkC,uGAAuG;AAChJ;AACA;AACO,uCAAuC,yIAAyI;AACvL;AACA;AACO,qCAAqC,yJAAyJ;AACrM;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACO,6BAA6B,uDAAuD;AAC3F;AACA;AACO,iCAAiC,6IAA6I;AACrL;AACA;AACO,oCAAoC,yMAAyM;AACpP;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,yFAAsB;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,uFAAoB;AAChC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,yFAAsB;AACxC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,6CAA6C,yFAAsB,EAAE,0FAAuB;AAC5F;AACA,kBAAkB,uFAAoB;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,qFAAkB;AAC9B;AACA;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD,YAAY,uFAAoB;AAChC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,0FAAuB;AACzC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,0FAAuB;AACzC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,0FAAuB;AACzC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,0FAAuB;AACnC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,4FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,qFAAkB;AACpC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,qFAAkB;AACpC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,qFAAkB;AACpC;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,QAAQ,qFAAkB;AAC1B;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,uGAAoC;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAA0B;AAC5C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,6FAA0B;AAClC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,4FAAwB;AACpC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,6FAA0B;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,yFAAsB;AACxC;AACA;AACA;AACA,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,sFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,yGAAqC;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,8FAA2B;AAC7C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,8FAA2B;AACnC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,6FAAyB;AACrC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,mGAA+B;AACjD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,kGAA8B;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,6FAAyB;AACrC;AACA;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,kGAA8B;AAChD;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,2FAAuB;AACnC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,2CAA2C,yFAAsB,EAAE,0FAAuB;AAC1F;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,YAAY;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,2FAAuB;AACnC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,0FAAsB;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,8FAA2B;AACnC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,6FAAyB;AACrC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,cAAc,eAAe;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA,8EAA8E,yFAAsB;AACpG;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,+FAA4B;AACpC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,8FAA0B;AACtC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,gGAA4B;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,gBAAgB;AAChB;AACA;AACA;AACA,8EAA8E,yFAAsB;AACpG;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,0FAAuB;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,yFAAqB;AACjC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,QAAQ,6FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,6CAA6C,yFAAsB;AACnE;AACA,QAAQ,2FAAuB;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,uFAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,QAAQ,iGAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,QAAQ,4FAAwB;AAChC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,uDAAuD,yFAAsB;AAC7E;AACA,QAAQ,qGAAiC;AACzC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,iGAA6B;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,MAAM;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,QAAQ,2FAAuB;AAC/B;AACA;AACA,cAAc,MAAM;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,oFAAgB;AAClC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,gGAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,+FAA2B;AACvC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,iGAA6B;AAC/C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,gBAAgB;AAChB;AACA;AACA;AACA,8EAA8E,yFAAsB;AACpG;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,iGAA8B;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,kGAA8B;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA,QAAQ,2FAAuB;AAC/B;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,2FAAwB;AAChC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,0FAAsB;AAClC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,cAAc,eAAe;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA,wEAAwE,yFAAsB;AAC9F;AACA;AACA,kBAAkB,qFAAiB;AACnC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,2FAAuB;AACnC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,4FAAwB;AACpC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC,cAAc,uBAAuB;AACrC,gBAAgB;AAChB;AACA;AACA,kFAAkF,yFAAsB;AACxG;AACA,0FAA0F,yFAAsB;AAChH;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,wEAAwE,yFAAsB;AAC9F;AACA,gDAAgD,yFAAsB;AACtE;AACA,kBAAkB,sFAAkB;AACpC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,mGAAgC;AACxC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,yFAAsB;AACpE;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,sGAAkC;AAC1C;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,mDAAmD,yFAAsB;AACzE;AACA,QAAQ,0GAAsC;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2GAAuC;AACzD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,2DAA2D,yFAAsB;AACjF;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,kGAA+B;AACvC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,yFAAsB;AACpE;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA,QAAQ,sGAAkC;AAC1C;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,mDAAmD,yFAAsB;AACzE;AACA,QAAQ,0GAAsC;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,0GAAsC;AACxD;AACA;AACA;AACA,cAAc,eAAe;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,gGAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,+FAA2B;AACvC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,iGAA6B;AAC/C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,gDAAgD,yFAAsB;AACtE;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,iGAA8B;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,gGAA4B;AACxC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,kGAA8B;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA,QAAQ,2FAAuB;AAC/B;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,mGAAgC;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,kGAA8B;AAC1C;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,cAAc,cAAc;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,cAAc,eAAe;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,mGAA+B;AACjD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,gGAA6B;AACrC;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,mDAAmD,yFAAsB;AACzE;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,wDAAwD,yFAAsB;AAC9E;AACA,QAAQ,sGAAkC;AAC1C;AACA;AACA;AACA;AACA,QAAQ,qGAAiC;AACzC;AACA;AACA;AACA;AACA,QAAQ,uGAAmC;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,2FAAuB;AACnC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,QAAQ,mGAA+B;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,QAAQ,kGAA8B;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,QAAQ,iGAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,6CAA6C,yFAAsB;AACnE;AACA,QAAQ,6FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,yFAAqB;AACjC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,kDAAkD,yFAAsB;AACxE;AACA,QAAQ,qGAAiC;AACzC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,iGAA6B;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,0DAA0D,yFAAsB;AAChF;AACA,QAAQ,0GAAsC;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,sGAAkC;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA,QAAQ,wGAAoC;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,cAAc,MAAM;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,QAAQ,6FAAyB;AACjC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,sFAAkB;AACpC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,0FAAuB;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,yFAAqB;AACjC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,cAAc,mBAAmB;AACjC,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,oFAAgB;AAClC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,sFAAmB;AAC3B;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAY;AAC9B;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,oFAAgB;AAClC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,wFAAoB;AACtC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,mFAAe;AAC3B;AACA;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,wFAAqB;AAC7B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,uFAAmB;AAC/B;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,sFAAkB;AACpC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,2CAA2C,yFAAsB,EAAE,0FAAuB;AAC1F;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,mFAAe;AACjC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,qFAAiB;AACnC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,sFAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA,gBAAgB,uFAAoB;AACpC;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,gGAA4B;AAC9C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,4FAAwB;AAC1C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,iGAA6B;AAC/C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,yFAAsB;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,wFAAoB;AAChC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,0FAAsB;AACxC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,mFAAe;AACjC;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,qGAAkC;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,oGAAgC;AAC5C;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,sGAAkC;AACpD;AACA;AACA;AACA,cAAc,aAAa;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,qGAAkC;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,oGAAgC;AAC5C;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,sGAAkC;AACpD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,qGAAiC;AACnD;AACA;AACA;AACA,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,+FAA2B;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,gHAA4C;AAC9D;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,mGAAgC;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,kGAA8B;AAC1C;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,cAAc,YAAY;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,+FAA4B;AACpC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,8FAA0B;AACtC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,gGAA4B;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,6FAAyB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,kGAA8B;AAC1C;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,6FAAyB;AACrC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,QAAQ,wGAAoC;AAC5C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,mBAAmB;AACjC,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,mDAAmD,yFAAsB;AACzE;AACA,8CAA8C,yFAAsB;AACpE;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,gGAA6B;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,+FAA2B;AACvC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,iGAA6B;AAC/C;AACA;AACA;AACA,cAAc,SAAS;AACvB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,qGAAiC;AACnD;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,wCAAwC,yFAAsB,EAAE,0FAAuB;AACvF;AACA,kBAAkB,gHAA4C;AAC9D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,8GAA0C;AACtD;AACA;AACA;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD,YAAY,uFAAoB;AAChC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,2FAAuB;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,mGAA+B;AACjD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,oGAAgC;AAClD;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,6FAA0B;AAClC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,uGAAoC;AAC/D,YAAY,4FAAwB;AACpC;AACA;AACA;AACA,YAAY,uFAAoB;AAChC;AACA,SAAS;AACT,YAAY,uGAAoC;AAChD;AACA;AACA;AACA,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA,4CAA4C,yFAAsB;AAClE;AACA,kBAAkB,8FAA0B;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,UAAU;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uFAAmB;AACrC;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,sCAAsC,yFAAsB,EAAE,0FAAuB;AACrF;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChlGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyD;;;;;;;;ACAzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA","file":"web3-cardano-token.common.3.js","sourcesContent":["import * as wasm from './emurgo_message_signing_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/**\n*/\nexport const LabelKind = Object.freeze({ Int:0,\"0\":\"Int\",Text:1,\"1\":\"Text\", });\n/**\n*/\nexport const SignedMessageKind = Object.freeze({ COSESIGN:0,\"0\":\"COSESIGN\",COSESIGN1:1,\"1\":\"COSESIGN1\", });\n/**\n*/\nexport const SigContext = Object.freeze({ Signature:0,\"0\":\"Signature\",Signature1:1,\"1\":\"Signature1\",CounterSignature:2,\"2\":\"CounterSignature\", });\n/**\n*/\nexport const CBORSpecialType = Object.freeze({ Bool:0,\"0\":\"Bool\",Float:1,\"1\":\"Float\",Unassigned:2,\"2\":\"Unassigned\",Break:3,\"3\":\"Break\",Undefined:4,\"4\":\"Undefined\",Null:5,\"5\":\"Null\", });\n/**\n*/\nexport const CBORValueKind = Object.freeze({ Int:0,\"0\":\"Int\",Bytes:1,\"1\":\"Bytes\",Text:2,\"2\":\"Text\",Array:3,\"3\":\"Array\",Object:4,\"4\":\"Object\",TaggedCBOR:5,\"5\":\"TaggedCBOR\",Special:6,\"6\":\"Special\", });\n/**\n*/\nexport const AlgorithmId = Object.freeze({\n/**\n*r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n*/\nEdDSA:0,\"0\":\"EdDSA\",\n/**\n*r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n*/\nChaCha20Poly1305:1,\"1\":\"ChaCha20Poly1305\", });\n/**\n*/\nexport const KeyType = Object.freeze({\n/**\n*r\" octet key pair\n*/\nOKP:0,\"0\":\"OKP\",\n/**\n*r\" 2-coord EC\n*/\nEC2:1,\"1\":\"EC2\",Symmetric:2,\"2\":\"Symmetric\", });\n/**\n*/\nexport const ECKey = Object.freeze({ CRV:0,\"0\":\"CRV\",X:1,\"1\":\"X\",Y:2,\"2\":\"Y\",D:3,\"3\":\"D\", });\n/**\n*/\nexport const CurveType = Object.freeze({ P256:0,\"0\":\"P256\",P384:1,\"1\":\"P384\",P521:2,\"2\":\"P521\",X25519:3,\"3\":\"X25519\",X448:4,\"4\":\"X448\",Ed25519:5,\"5\":\"Ed25519\",Ed448:6,\"6\":\"Ed448\", });\n/**\n*/\nexport const KeyOperation = Object.freeze({ Sign:0,\"0\":\"Sign\",Verify:1,\"1\":\"Verify\",Encrypt:2,\"2\":\"Encrypt\",Decrypt:3,\"3\":\"Decrypt\",WrapKey:4,\"4\":\"WrapKey\",UnwrapKey:5,\"5\":\"UnwrapKey\",DeriveKey:6,\"6\":\"DeriveKey\",DeriveBits:7,\"7\":\"DeriveBits\", });\n/**\n*/\nexport class BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nexport class CBORArray {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORArray}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {CBORValue}\n    */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} elem\n    */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORObject {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORObject}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject}\n    */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {CBORValue} key\n    * @param {CBORValue} value\n    * @returns {CBORValue | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} key\n    * @returns {CBORValue | undefined}\n    */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORSpecial {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORSpecial}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {boolean} b\n    * @returns {CBORSpecial}\n    */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {number} u\n    * @returns {CBORSpecial}\n    */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean | undefined}\n    */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nexport class CBORValue {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {CBORValue}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {CBORValue}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORArray} arr\n    * @returns {CBORValue}\n    */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORObject} obj\n    * @returns {CBORValue}\n    */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {TaggedCBOR} tagged\n    * @returns {CBORValue}\n    */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORSpecial} special\n    * @returns {CBORValue}\n    */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {CBORArray | undefined}\n    */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject | undefined}\n    */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {TaggedCBOR | undefined}\n    */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial | undefined}\n    */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @param {COSERecipients} recipients\n    * @returns {COSEEncrypt}\n    */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt0 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt0}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSEEncrypt0}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n    * @param {Label} key_type\n    */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n    * @returns {Label}\n    */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} key_ops\n    */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} base_init_vector\n    */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @param {Label} key_type\n    * @returns {COSEKey}\n    */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipient {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipient}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSERecipient}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipients {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipients}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSERecipient}\n    */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @param {COSERecipient} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class COSESign {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {COSESignatures} signatures\n    * @returns {COSESign}\n    */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign1}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n    * # Arguments\n    * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n    * @param {Uint8Array | undefined} external_aad\n    * @param {Uint8Array | undefined} external_payload\n    * @returns {SigStructure}\n    */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad) ? 0 : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload) ? 0 : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {Uint8Array} signature\n    * @returns {COSESign1}\n    */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1Builder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESign1Builder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} signed_sig_structure\n    * @returns {COSESign1}\n    */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESignBuilder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} signed_sig_structure\n    * @returns {COSESign}\n    */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} signature\n    * @returns {COSESignature}\n    */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignatures {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignatures}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSESignature}\n    */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class CounterSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CounterSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} cose_signature\n    * @returns {CounterSignature}\n    */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} cose_signatures\n    * @returns {CounterSignature}\n    */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\n/**\n*/\nexport class EdDSA25519Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} pubkey_bytes\n    * @returns {EdDSA25519Key}\n    */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} private_key_bytes\n    */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /**\n    */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /**\n    */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n    * @returns {COSEKey}\n    */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class HeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} criticality\n    */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Label} content_type\n    */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} init_vector\n    */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} partial_init_vector\n    */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {CounterSignature} counter_signature\n    */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n    * @returns {CounterSignature | undefined}\n    */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @returns {Labels}\n    */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Headers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Headers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {ProtectedHeaderMap} protected_\n    * @param {HeaderMap} unprotected_\n    * @returns {Headers}\n    */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Label {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Label}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {Label}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {Label}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} id\n    * @returns {Label}\n    */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_type\n    * @returns {Label}\n    */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} ec_key\n    * @returns {Label}\n    */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} curve_type\n    * @returns {Label}\n    */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_op\n    * @returns {Label}\n    */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Labels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Labels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {Labels}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Label}\n    */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Label} elem\n    */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class PasswordEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PasswordEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt0} data\n    * @returns {PasswordEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtectedHeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtectedHeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {HeaderMap} header_map\n    * @returns {ProtectedHeaderMap}\n    */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PubKeyEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PubKeyEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt} data\n    * @returns {PubKeyEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SigStructure {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SigStructure}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap | undefined}\n    */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {ProtectedHeaderMap} sign_protected\n    */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n    * @param {number} context\n    * @param {ProtectedHeaderMap} body_protected\n    * @param {Uint8Array} external_aad\n    * @param {Uint8Array} payload\n    * @returns {SigStructure}\n    */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SignedMessage}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign} cose_sign\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign1} cose_sign1\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {SignedMessage}\n    */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {COSESign | undefined}\n    */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {COSESign1 | undefined}\n    */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TaggedCBOR {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TaggedCBOR}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {CBORValue}\n    */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} tag\n    * @param {CBORValue} value\n    * @returns {TaggedCBOR}\n    */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n","import * as wasm from \"./emurgo_message_signing_bg.wasm\";\nexport * from \"./emurgo_message_signing_bg.js\";","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}