{"version":3,"sources":["webpack://web3-cardano-token/./temporary_modules/@emurgo/cardano-message-signing-browser/emurgo_message_signing.js","webpack://web3-cardano-token/./temporary_modules/@emurgo/cardano-message-signing-browser/emurgo_message_signing_bg.js","webpack://web3-cardano-token/./node_modules/core-js/modules/es.typed-array.float64-array.js","webpack://web3-cardano-token/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://web3-cardano-token/(webpack)/buildin/harmony-module.js"],"names":["heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","isLikeNone","x","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","LabelKind","Object","freeze","Int","Text","SignedMessageKind","COSESIGN","COSESIGN1","SigContext","Signature","Signature1","CounterSignature","CBORSpecialType","Bool","Float","Unassigned","Break","Undefined","Null","CBORValueKind","Bytes","TaggedCBOR","Special","AlgorithmId","EdDSA","ChaCha20Poly1305","KeyType","OKP","EC2","Symmetric","ECKey","CRV","X","Y","D","CurveType","P256","P384","P521","X25519","X448","Ed25519","Ed448","KeyOperation","Sign","Verify","Encrypt","Decrypt","WrapKey","UnwrapKey","DeriveKey","DeriveBits","BigNum","__destroy_into_raw","retptr","r0","r1","v0","other","__wrap","create","prototype","bytes","ptr0","len0","string","CBORArray","index","CBORValue","elem","use_definite","CBORObject","key","value","CBORSpecial","b","u","int","text","arr","tagged","special","COSEEncrypt","Headers","COSERecipients","headers","ciphertext","recipients","COSEEncrypt0","COSEKey","key_type","Label","key_id","algorithm_id","key_ops","Labels","base_init_vector","label","COSERecipient","COSESign","COSESignatures","payload","signatures","COSESign1","external_aad","external_payload","ptr1","len1","SigStructure","signature","COSESign1Builder","signed_sig_structure","is_payload_external","COSESignBuilder","COSESignature","cose_signature","cose_signatures","EdDSA25519Key","private_key_bytes","pubkey_bytes","HeaderMap","criticality","content_type","init_vector","partial_init_vector","counter_signature","ProtectedHeaderMap","protected_","unprotected_","id","ec_key","curve_type","key_op","PasswordEncryption","data","header_map","PubKeyEncryption","sign_protected","context","body_protected","SignedMessage","cose_sign","cose_sign1","s","tag","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","_typeof","Symbol","iterator","constructor"],"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","file":"web3-cardano-token.common.5.js","sourcesContent":["import * as wasm from \"./emurgo_message_signing_bg.wasm\";\nexport * from \"./emurgo_message_signing_bg.js\";","import * as wasm from './emurgo_message_signing_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/**\n*/\nexport const LabelKind = Object.freeze({ Int:0,\"0\":\"Int\",Text:1,\"1\":\"Text\", });\n/**\n*/\nexport const SignedMessageKind = Object.freeze({ COSESIGN:0,\"0\":\"COSESIGN\",COSESIGN1:1,\"1\":\"COSESIGN1\", });\n/**\n*/\nexport const SigContext = Object.freeze({ Signature:0,\"0\":\"Signature\",Signature1:1,\"1\":\"Signature1\",CounterSignature:2,\"2\":\"CounterSignature\", });\n/**\n*/\nexport const CBORSpecialType = Object.freeze({ Bool:0,\"0\":\"Bool\",Float:1,\"1\":\"Float\",Unassigned:2,\"2\":\"Unassigned\",Break:3,\"3\":\"Break\",Undefined:4,\"4\":\"Undefined\",Null:5,\"5\":\"Null\", });\n/**\n*/\nexport const CBORValueKind = Object.freeze({ Int:0,\"0\":\"Int\",Bytes:1,\"1\":\"Bytes\",Text:2,\"2\":\"Text\",Array:3,\"3\":\"Array\",Object:4,\"4\":\"Object\",TaggedCBOR:5,\"5\":\"TaggedCBOR\",Special:6,\"6\":\"Special\", });\n/**\n*/\nexport const AlgorithmId = Object.freeze({\n/**\n*r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n*/\nEdDSA:0,\"0\":\"EdDSA\",\n/**\n*r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n*/\nChaCha20Poly1305:1,\"1\":\"ChaCha20Poly1305\", });\n/**\n*/\nexport const KeyType = Object.freeze({\n/**\n*r\" octet key pair\n*/\nOKP:0,\"0\":\"OKP\",\n/**\n*r\" 2-coord EC\n*/\nEC2:1,\"1\":\"EC2\",Symmetric:2,\"2\":\"Symmetric\", });\n/**\n*/\nexport const ECKey = Object.freeze({ CRV:0,\"0\":\"CRV\",X:1,\"1\":\"X\",Y:2,\"2\":\"Y\",D:3,\"3\":\"D\", });\n/**\n*/\nexport const CurveType = Object.freeze({ P256:0,\"0\":\"P256\",P384:1,\"1\":\"P384\",P521:2,\"2\":\"P521\",X25519:3,\"3\":\"X25519\",X448:4,\"4\":\"X448\",Ed25519:5,\"5\":\"Ed25519\",Ed448:6,\"6\":\"Ed448\", });\n/**\n*/\nexport const KeyOperation = Object.freeze({ Sign:0,\"0\":\"Sign\",Verify:1,\"1\":\"Verify\",Encrypt:2,\"2\":\"Encrypt\",Decrypt:3,\"3\":\"Decrypt\",WrapKey:4,\"4\":\"WrapKey\",UnwrapKey:5,\"5\":\"UnwrapKey\",DeriveKey:6,\"6\":\"DeriveKey\",DeriveBits:7,\"7\":\"DeriveBits\", });\n/**\n*/\nexport class BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nexport class CBORArray {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORArray}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {CBORValue}\n    */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} elem\n    */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORObject {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORObject}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject}\n    */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {CBORValue} key\n    * @param {CBORValue} value\n    * @returns {CBORValue | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} key\n    * @returns {CBORValue | undefined}\n    */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORSpecial {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORSpecial}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {boolean} b\n    * @returns {CBORSpecial}\n    */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {number} u\n    * @returns {CBORSpecial}\n    */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean | undefined}\n    */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nexport class CBORValue {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {CBORValue}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {CBORValue}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORArray} arr\n    * @returns {CBORValue}\n    */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORObject} obj\n    * @returns {CBORValue}\n    */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {TaggedCBOR} tagged\n    * @returns {CBORValue}\n    */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORSpecial} special\n    * @returns {CBORValue}\n    */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {CBORArray | undefined}\n    */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject | undefined}\n    */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {TaggedCBOR | undefined}\n    */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial | undefined}\n    */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @param {COSERecipients} recipients\n    * @returns {COSEEncrypt}\n    */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt0 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt0}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSEEncrypt0}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n    * @param {Label} key_type\n    */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n    * @returns {Label}\n    */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} key_ops\n    */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} base_init_vector\n    */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @param {Label} key_type\n    * @returns {COSEKey}\n    */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipient {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipient}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSERecipient}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipients {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipients}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSERecipient}\n    */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @param {COSERecipient} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class COSESign {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {COSESignatures} signatures\n    * @returns {COSESign}\n    */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign1}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n    * # Arguments\n    * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n    * @param {Uint8Array | undefined} external_aad\n    * @param {Uint8Array | undefined} external_payload\n    * @returns {SigStructure}\n    */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad) ? 0 : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload) ? 0 : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {Uint8Array} signature\n    * @returns {COSESign1}\n    */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1Builder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESign1Builder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} signed_sig_structure\n    * @returns {COSESign1}\n    */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESignBuilder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} signed_sig_structure\n    * @returns {COSESign}\n    */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} signature\n    * @returns {COSESignature}\n    */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignatures {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignatures}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSESignature}\n    */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class CounterSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CounterSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} cose_signature\n    * @returns {CounterSignature}\n    */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} cose_signatures\n    * @returns {CounterSignature}\n    */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\n/**\n*/\nexport class EdDSA25519Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} pubkey_bytes\n    * @returns {EdDSA25519Key}\n    */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} private_key_bytes\n    */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /**\n    */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /**\n    */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n    * @returns {COSEKey}\n    */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class HeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} criticality\n    */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Label} content_type\n    */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} init_vector\n    */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} partial_init_vector\n    */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {CounterSignature} counter_signature\n    */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n    * @returns {CounterSignature | undefined}\n    */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @returns {Labels}\n    */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Headers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Headers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {ProtectedHeaderMap} protected_\n    * @param {HeaderMap} unprotected_\n    * @returns {Headers}\n    */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Label {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Label}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {Label}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {Label}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} id\n    * @returns {Label}\n    */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_type\n    * @returns {Label}\n    */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} ec_key\n    * @returns {Label}\n    */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} curve_type\n    * @returns {Label}\n    */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_op\n    * @returns {Label}\n    */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Labels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Labels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {Labels}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Label}\n    */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Label} elem\n    */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class PasswordEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PasswordEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt0} data\n    * @returns {PasswordEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtectedHeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtectedHeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {HeaderMap} header_map\n    * @returns {ProtectedHeaderMap}\n    */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PubKeyEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PubKeyEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt} data\n    * @returns {PubKeyEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SigStructure {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SigStructure}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap | undefined}\n    */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {ProtectedHeaderMap} sign_protected\n    */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n    * @param {number} context\n    * @param {ProtectedHeaderMap} body_protected\n    * @param {Uint8Array} external_aad\n    * @param {Uint8Array} payload\n    * @returns {SigStructure}\n    */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SignedMessage}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign} cose_sign\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign1} cose_sign1\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {SignedMessage}\n    */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {COSESign | undefined}\n    */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {COSESign1 | undefined}\n    */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TaggedCBOR {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TaggedCBOR}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {CBORValue}\n    */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} tag\n    * @param {CBORValue} value\n    * @returns {TaggedCBOR}\n    */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n","var createTypedArrayConstructor = require('../internals/typed-array-constructor');\n\n// `Float64Array` constructor\n// https://tc39.es/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Float64', function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}