{"version":3,"sources":["webpack://web3-cardano-token/./node_modules/util/node_modules/inherits/inherits_browser.js","webpack://web3-cardano-token/./node_modules/util/util.js","webpack://web3-cardano-token/./node_modules/node-libs-browser/mock/process.js","webpack://web3-cardano-token/./node_modules/util/support/isBufferBrowser.js","webpack://web3-cardano-token/./node_modules/path-browserify/index.js","webpack://web3-cardano-token/./node_modules/emurgo-message-signing-nodejs/emurgo_message_signing.js"],"names":["Object","create","module","exports","ctor","superCtor","super_","prototype","constructor","value","enumerable","writable","configurable","TempCtor","getOwnPropertyDescriptors","obj","keys","descriptors","i","length","getOwnPropertyDescriptor","formatRegExp","format","f","isString","objects","arguments","push","inspect","join","args","len","str","String","replace","x","Number","JSON","stringify","_","isNull","isObject","deprecate","fn","msg","process","noDeprecation","apply","this","warned","deprecated","throwDeprecation","Error","traceDeprecation","console","trace","error","debugEnviron","debugs","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","arrayToHash","array","hash","forEach","val","idx","recurseTimes","isFunction","ret","primitive","formatPrimitive","visibleKeys","getOwnPropertyNames","isError","indexOf","formatError","name","isRegExp","RegExp","toString","call","isDate","Date","output","base","braces","isArray","n","toUTCString","formatArray","map","key","formatProperty","pop","reduceToSingleString","simple","isNumber","l","hasOwnProperty","match","desc","get","set","split","line","substr","reduce","prev","cur","numLinesEst","ar","Array","arg","isNullOrUndefined","isSymbol","re","objectToString","d","e","isPrimitive","o","pad","debuglog","NODE_DEBUG","toUpperCase","test","pid","isBuffer","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","prop","log","inherits","origin","add","kCustomPromisifiedSymbol","Symbol","undefined","callbackifyOnRejected","reason","cb","newReason","callbackify","original","TypeError","callbackified","maybeCb","self","then","nextTick","rej","setPrototypeOf","getPrototypeOf","defineProperties","promisify","defineProperty","promiseResolve","promiseReject","promise","Promise","resolve","reject","err","custom","slice","shift","setTimeout","platform","arch","execPath","title","browser","env","argv","binding","path","cwd","chdir","dir","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","copy","fill","readUInt8","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","basename","start","end","matchedSlash","charCodeAt","filter","xs","res","resolvedPath","resolvedAbsolute","charAt","p","normalize","isAbsolute","trailingSlash","paths","index","relative","from","to","trim","arr","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","code","hasRoot","ext","extname","startDot","startPart","preDotState","wasm","imports","TextDecoder","TextEncoder","heap","getObject","heap_next","dropObject","takeObject","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","subarray","addHeapObject","debugString","type","description","debug","builtInMatches","exec","className","message","stack","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","encodeInto","view","buf","encode","read","written","passStringToWasm0","malloc","realloc","mem","offset","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","isLikeNone","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","LabelKind","freeze","Int","Text","SignedMessageKind","COSESIGN","COSESIGN1","SigContext","Signature","Signature1","CounterSignature","CBORSpecialType","Bool","Float","Unassigned","Break","Undefined","Null","CBORValueKind","Bytes","TaggedCBOR","Special","AlgorithmId","EdDSA","ChaCha20Poly1305","KeyType","OKP","EC2","Symmetric","ECKey","CRV","X","Y","D","CurveType","P256","P384","P521","X25519","X448","Ed25519","Ed448","KeyOperation","Sign","Verify","Encrypt","Decrypt","WrapKey","UnwrapKey","DeriveKey","DeriveBits","BigNum","__destroy_into_raw","__wbg_bignum_free","retptr","__wbindgen_add_to_stack_pointer","bignum_to_bytes","r0","r1","v0","__wbindgen_free","bytes","ptr0","__wbindgen_malloc","len0","bignum_from_bytes","__wrap","string","__wbindgen_realloc","bignum_from_str","bignum_to_str","other","bignum_checked_mul","bignum_checked_add","bignum_checked_sub","CBORArray","__wbg_cborarray_free","cborarray_to_bytes","cborarray_from_bytes","cborarray_new","cborarray_len","cborarray_get","CBORValue","elem","cborarray_add","use_definite","cborarray_set_definite_encoding","cborarray_is_definite","CBORObject","__wbg_cborobject_free","cborobject_to_bytes","cborobject_from_bytes","cborobject_new","cborobject_len","cborobject_insert","cborobject_get","cborobject_keys","cborobject_set_definite_encoding","cborobject_is_definite","CBORSpecial","__wbg_cborspecial_free","cborspecial_to_bytes","cborspecial_from_bytes","b","cborspecial_new_bool","u","cborspecial_new_unassigned","cborspecial_new_break","cborspecial_new_null","cborspecial_new_undefined","cborspecial_kind","cborspecial_as_bool","cborspecial_as_float","cborspecial_as_unassigned","__wbg_cborvalue_free","cborvalue_to_bytes","cborvalue_from_bytes","int","cborvalue_new_int","cborvalue_new_bytes","text","cborvalue_new_text","cborvalue_new_array","cborvalue_new_object","tagged","cborvalue_new_tagged","special","cborvalue_new_special","cborvalue_kind","cborvalue_as_int","cborvalue_as_bytes","cborvalue_as_text","cborvalue_as_array","cborvalue_as_object","cborvalue_as_tagged","cborvalue_as_special","COSEEncrypt","__wbg_coseencrypt_free","coseencrypt_to_bytes","coseencrypt_from_bytes","coseencrypt0_headers","Headers","coseencrypt0_ciphertext","coseencrypt_recipients","COSERecipients","headers","ciphertext","recipients","coseencrypt_new","COSEEncrypt0","__wbg_coseencrypt0_free","coseencrypt0_to_bytes","coseencrypt0_from_bytes","coseencrypt0_new","COSEKey","__wbg_cosekey_free","cosekey_to_bytes","cosekey_from_bytes","key_type","Label","cosekey_set_key_type","cosekey_key_type","key_id","cosekey_set_key_id","cosekey_key_id","algorithm_id","cosekey_set_algorithm_id","cosekey_algorithm_id","key_ops","Labels","cosekey_set_key_ops","cosekey_key_ops","base_init_vector","cosekey_set_base_init_vector","cosekey_base_init_vector","label","cosekey_header","cosekey_set_header","cosekey_new","COSERecipient","__wbg_coserecipient_free","coserecipient_to_bytes","coserecipient_from_bytes","__wbg_coserecipients_free","coserecipients_to_bytes","coserecipients_from_bytes","coserecipients_new","coserecipients_len","coserecipients_get","coserecipients_add","COSESign","__wbg_cosesign_free","cosesign_to_bytes","cosesign_from_bytes","cosesign_signatures","COSESignatures","payload","signatures","cosesign_new","COSESign1","__wbg_cosesign1_free","cosesign1_to_bytes","cosesign1_from_bytes","cosesign1_signature","external_aad","external_payload","ptr1","len1","cosesign1_signed_data","SigStructure","signature","cosesign1_new","COSESign1Builder","__wbg_cosesign1builder_free","is_payload_external","cosesign1builder_new","cosesign1builder_hash_payload","cosesign1builder_set_external_aad","cosesign1builder_make_data_to_sign","signed_sig_structure","cosesign1builder_build","COSESignBuilder","__wbg_cosesignbuilder_free","cosesignbuilder_new","cosesignbuilder_make_data_to_sign","cosesignbuilder_build","COSESignature","__wbg_cosesignature_free","cosesignature_to_bytes","cosesignature_from_bytes","cosesignature_signature","cosesignature_new","__wbg_cosesignatures_free","cosesignatures_to_bytes","cosesignatures_from_bytes","cosesignatures_get","cosesignatures_add","__wbg_countersignature_free","countersignature_to_bytes","countersignature_from_bytes","cose_signature","countersignature_new_single","cose_signatures","countersignature_new_multi","countersignature_signatures","EdDSA25519Key","__wbg_eddsa25519key_free","pubkey_bytes","eddsa25519key_new","private_key_bytes","eddsa25519key_set_private_key","eddsa25519key_is_for_signing","eddsa25519key_is_for_verifying","eddsa25519key_build","HeaderMap","__wbg_headermap_free","headermap_to_bytes","headermap_from_bytes","headermap_set_algorithm_id","headermap_algorithm_id","criticality","headermap_set_criticality","headermap_criticality","content_type","headermap_set_key_id","headermap_key_id","init_vector","partial_init_vector","headermap_set_partial_init_vector","headermap_partial_init_vector","counter_signature","headermap_set_counter_signature","headermap_counter_signature","headermap_header","headermap_set_header","headermap_keys","headermap_new","__wbg_headers_free","headers_to_bytes","headers_from_bytes","headers_protected","ProtectedHeaderMap","headers_unprotected","protected_","unprotected_","headers_new","__wbg_int_free","int_new","int_new_negative","int_new_i32","int_is_positive","int_as_positive","int_as_negative","int_as_i32","__wbg_label_free","label_to_bytes","label_from_bytes","label_new_int","label_new_text","label_kind","label_as_int","label_as_text","id","label_from_algorithm_id","label_from_key_type","ec_key","label_from_ec_key","curve_type","label_from_curve_type","key_op","label_from_key_operation","__wbg_labels_free","labels_to_bytes","labels_from_bytes","labels_get","labels_add","PasswordEncryption","__wbg_passwordencryption_free","passwordencryption_to_bytes","passwordencryption_from_bytes","data","passwordencryption_new","__wbg_protectedheadermap_free","protectedheadermap_to_bytes","protectedheadermap_from_bytes","protectedheadermap_new_empty","header_map","protectedheadermap_new","protectedheadermap_deserialized_headers","PubKeyEncryption","__wbg_pubkeyencryption_free","pubkeyencryption_to_bytes","pubkeyencryption_from_bytes","pubkeyencryption_new","__wbg_sigstructure_free","sigstructure_to_bytes","sigstructure_from_bytes","sigstructure_context","sigstructure_body_protected","sigstructure_sign_protected","sigstructure_external_aad","sigstructure_payload","sign_protected","sigstructure_set_sign_protected","context","body_protected","sigstructure_new","SignedMessage","__wbg_signedmessage_free","signedmessage_to_bytes","signedmessage_from_bytes","cose_sign","signedmessage_new_cose_sign","cose_sign1","signedmessage_new_cose_sign1","s","signedmessage_from_user_facing_encoding","signedmessage_to_user_facing_encoding","signedmessage_kind","signedmessage_as_cose_sign","signedmessage_as_cose_sign1","__wbg_taggedcbor_free","taggedcbor_to_bytes","taggedcbor_from_bytes","taggedcbor_tag","taggedcbor_value","tag","taggedcbor_new","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__dirname","readFileSync","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm"],"mappings":"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","file":"web3-cardano-token.umd.min.2.js","sourcesContent":["if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","exports.nextTick = function nextTick(fn) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    setTimeout(function () {\n        fn.apply(null, args);\n    }, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder, TextEncoder } = require(`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/**\n*/\nmodule.exports.LabelKind = Object.freeze({ Int:0,\"0\":\"Int\",Text:1,\"1\":\"Text\", });\n/**\n*/\nmodule.exports.SignedMessageKind = Object.freeze({ COSESIGN:0,\"0\":\"COSESIGN\",COSESIGN1:1,\"1\":\"COSESIGN1\", });\n/**\n*/\nmodule.exports.SigContext = Object.freeze({ Signature:0,\"0\":\"Signature\",Signature1:1,\"1\":\"Signature1\",CounterSignature:2,\"2\":\"CounterSignature\", });\n/**\n*/\nmodule.exports.CBORSpecialType = Object.freeze({ Bool:0,\"0\":\"Bool\",Float:1,\"1\":\"Float\",Unassigned:2,\"2\":\"Unassigned\",Break:3,\"3\":\"Break\",Undefined:4,\"4\":\"Undefined\",Null:5,\"5\":\"Null\", });\n/**\n*/\nmodule.exports.CBORValueKind = Object.freeze({ Int:0,\"0\":\"Int\",Bytes:1,\"1\":\"Bytes\",Text:2,\"2\":\"Text\",Array:3,\"3\":\"Array\",Object:4,\"4\":\"Object\",TaggedCBOR:5,\"5\":\"TaggedCBOR\",Special:6,\"6\":\"Special\", });\n/**\n*/\nmodule.exports.AlgorithmId = Object.freeze({\n/**\n*r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n*/\nEdDSA:0,\"0\":\"EdDSA\",\n/**\n*r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n*/\nChaCha20Poly1305:1,\"1\":\"ChaCha20Poly1305\", });\n/**\n*/\nmodule.exports.KeyType = Object.freeze({\n/**\n*r\" octet key pair\n*/\nOKP:0,\"0\":\"OKP\",\n/**\n*r\" 2-coord EC\n*/\nEC2:1,\"1\":\"EC2\",Symmetric:2,\"2\":\"Symmetric\", });\n/**\n*/\nmodule.exports.ECKey = Object.freeze({ CRV:0,\"0\":\"CRV\",X:1,\"1\":\"X\",Y:2,\"2\":\"Y\",D:3,\"3\":\"D\", });\n/**\n*/\nmodule.exports.CurveType = Object.freeze({ P256:0,\"0\":\"P256\",P384:1,\"1\":\"P384\",P521:2,\"2\":\"P521\",X25519:3,\"3\":\"X25519\",X448:4,\"4\":\"X448\",Ed25519:5,\"5\":\"Ed25519\",Ed448:6,\"6\":\"Ed448\", });\n/**\n*/\nmodule.exports.KeyOperation = Object.freeze({ Sign:0,\"0\":\"Sign\",Verify:1,\"1\":\"Verify\",Encrypt:2,\"2\":\"Encrypt\",Decrypt:3,\"3\":\"Decrypt\",WrapKey:4,\"4\":\"WrapKey\",UnwrapKey:5,\"5\":\"UnwrapKey\",DeriveKey:6,\"6\":\"DeriveKey\",DeriveBits:7,\"7\":\"DeriveBits\", });\n/**\n*/\nclass BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\nmodule.exports.BigNum = BigNum;\n/**\n*/\nclass CBORArray {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORArray}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {CBORValue}\n    */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} elem\n    */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nmodule.exports.CBORArray = CBORArray;\n/**\n*/\nclass CBORObject {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORObject}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject}\n    */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {CBORValue} key\n    * @param {CBORValue} value\n    * @returns {CBORValue | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} key\n    * @returns {CBORValue | undefined}\n    */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nmodule.exports.CBORObject = CBORObject;\n/**\n*/\nclass CBORSpecial {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORSpecial}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {boolean} b\n    * @returns {CBORSpecial}\n    */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {number} u\n    * @returns {CBORSpecial}\n    */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean | undefined}\n    */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\nmodule.exports.CBORSpecial = CBORSpecial;\n/**\n*/\nclass CBORValue {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {CBORValue}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {CBORValue}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORArray} arr\n    * @returns {CBORValue}\n    */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORObject} obj\n    * @returns {CBORValue}\n    */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {TaggedCBOR} tagged\n    * @returns {CBORValue}\n    */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORSpecial} special\n    * @returns {CBORValue}\n    */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {CBORArray | undefined}\n    */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject | undefined}\n    */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {TaggedCBOR | undefined}\n    */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial | undefined}\n    */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\nmodule.exports.CBORValue = CBORValue;\n/**\n*/\nclass COSEEncrypt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @param {COSERecipients} recipients\n    * @returns {COSEEncrypt}\n    */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\nmodule.exports.COSEEncrypt = COSEEncrypt;\n/**\n*/\nclass COSEEncrypt0 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt0}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSEEncrypt0}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\nmodule.exports.COSEEncrypt0 = COSEEncrypt0;\n/**\n*/\nclass COSEKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n    * @param {Label} key_type\n    */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n    * @returns {Label}\n    */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} key_ops\n    */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} base_init_vector\n    */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @param {Label} key_type\n    * @returns {COSEKey}\n    */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nmodule.exports.COSEKey = COSEKey;\n/**\n*/\nclass COSERecipient {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipient}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSERecipient}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\nmodule.exports.COSERecipient = COSERecipient;\n/**\n*/\nclass COSERecipients {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipients}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSERecipient}\n    */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @param {COSERecipient} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.COSERecipients = COSERecipients;\n/**\n*/\nclass COSESign {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {COSESignatures} signatures\n    * @returns {COSESign}\n    */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nmodule.exports.COSESign = COSESign;\n/**\n*/\nclass COSESign1 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign1}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n    * # Arguments\n    * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n    * @param {Uint8Array | undefined} external_aad\n    * @param {Uint8Array | undefined} external_payload\n    * @returns {SigStructure}\n    */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad) ? 0 : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload) ? 0 : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {Uint8Array} signature\n    * @returns {COSESign1}\n    */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.COSESign1 = COSESign1;\n/**\n*/\nclass COSESign1Builder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESign1Builder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} signed_sig_structure\n    * @returns {COSESign1}\n    */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.COSESign1Builder = COSESign1Builder;\n/**\n*/\nclass COSESignBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESignBuilder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} signed_sig_structure\n    * @returns {COSESign}\n    */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nmodule.exports.COSESignBuilder = COSESignBuilder;\n/**\n*/\nclass COSESignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} signature\n    * @returns {COSESignature}\n    */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\nmodule.exports.COSESignature = COSESignature;\n/**\n*/\nclass COSESignatures {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignatures}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSESignature}\n    */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.COSESignatures = COSESignatures;\n/**\n*/\nclass CounterSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CounterSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} cose_signature\n    * @returns {CounterSignature}\n    */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} cose_signatures\n    * @returns {CounterSignature}\n    */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\nmodule.exports.CounterSignature = CounterSignature;\n/**\n*/\nclass EdDSA25519Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} pubkey_bytes\n    * @returns {EdDSA25519Key}\n    */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} private_key_bytes\n    */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /**\n    */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /**\n    */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n    * @returns {COSEKey}\n    */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nmodule.exports.EdDSA25519Key = EdDSA25519Key;\n/**\n*/\nclass HeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} criticality\n    */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Label} content_type\n    */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} init_vector\n    */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} partial_init_vector\n    */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {CounterSignature} counter_signature\n    */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n    * @returns {CounterSignature | undefined}\n    */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @returns {Labels}\n    */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\nmodule.exports.HeaderMap = HeaderMap;\n/**\n*/\nclass Headers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Headers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {ProtectedHeaderMap} protected_\n    * @param {HeaderMap} unprotected_\n    * @returns {Headers}\n    */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\nmodule.exports.Headers = Headers;\n/**\n*/\nclass Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Int = Int;\n/**\n*/\nclass Label {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Label}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {Label}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {Label}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} id\n    * @returns {Label}\n    */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_type\n    * @returns {Label}\n    */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} ec_key\n    * @returns {Label}\n    */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} curve_type\n    * @returns {Label}\n    */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_op\n    * @returns {Label}\n    */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\nmodule.exports.Label = Label;\n/**\n*/\nclass Labels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Labels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {Labels}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Label}\n    */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Label} elem\n    */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Labels = Labels;\n/**\n*/\nclass PasswordEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PasswordEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt0} data\n    * @returns {PasswordEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\nmodule.exports.PasswordEncryption = PasswordEncryption;\n/**\n*/\nclass ProtectedHeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtectedHeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {HeaderMap} header_map\n    * @returns {ProtectedHeaderMap}\n    */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\nmodule.exports.ProtectedHeaderMap = ProtectedHeaderMap;\n/**\n*/\nclass PubKeyEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PubKeyEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt} data\n    * @returns {PubKeyEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\nmodule.exports.PubKeyEncryption = PubKeyEncryption;\n/**\n*/\nclass SigStructure {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SigStructure}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap | undefined}\n    */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {ProtectedHeaderMap} sign_protected\n    */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n    * @param {number} context\n    * @param {ProtectedHeaderMap} body_protected\n    * @param {Uint8Array} external_aad\n    * @param {Uint8Array} payload\n    * @returns {SigStructure}\n    */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\nmodule.exports.SigStructure = SigStructure;\n/**\n*/\nclass SignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SignedMessage}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign} cose_sign\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign1} cose_sign1\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {SignedMessage}\n    */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {COSESign | undefined}\n    */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {COSESign1 | undefined}\n    */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.SignedMessage = SignedMessage;\n/**\n*/\nclass TaggedCBOR {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TaggedCBOR}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {CBORValue}\n    */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} tag\n    * @param {CBORValue} value\n    * @returns {TaggedCBOR}\n    */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\nmodule.exports.TaggedCBOR = TaggedCBOR;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nconst path = require('path').join(__dirname, 'emurgo_message_signing_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n"],"sourceRoot":""}