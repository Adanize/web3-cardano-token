{"version":3,"sources":["webpack://web3-cardano-token/./node_modules/emurgo-message-signing/emurgo_message_signing_bg.js","webpack://web3-cardano-token/./node_modules/emurgo-message-signing/emurgo_message_signing.js","webpack://web3-cardano-token/(webpack)/buildin/harmony-module.js"],"names":["heap","Array","fill","undefined","getObject","idx","push","heap_next","length","dropObject","takeObject","ret","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","isLikeNone","x","cachegetFloat64Memory0","getFloat64Memory0","Float64Array","LabelKind","Object","freeze","Int","Text","SignedMessageKind","COSESIGN","COSESIGN1","SigContext","Signature","Signature1","CounterSignature","CBORSpecialType","Bool","Float","Unassigned","Break","Undefined","Null","CBORValueKind","Bytes","TaggedCBOR","Special","AlgorithmId","EdDSA","ChaCha20Poly1305","KeyType","OKP","EC2","Symmetric","ECKey","CRV","X","Y","D","CurveType","P256","P384","P521","X25519","X448","Ed25519","Ed448","KeyOperation","Sign","Verify","Encrypt","Decrypt","WrapKey","UnwrapKey","DeriveKey","DeriveBits","BigNum","create","prototype","this","__destroy_into_raw","retptr","r0","r1","v0","bytes","ptr0","len0","__wrap","string","other","CBORArray","index","CBORValue","elem","use_definite","CBORObject","key","value","CBORSpecial","b","u","int","text","arr","tagged","special","COSEEncrypt","Headers","COSERecipients","headers","ciphertext","recipients","COSEEncrypt0","COSEKey","key_type","Label","key_id","algorithm_id","key_ops","Labels","base_init_vector","label","COSERecipient","COSESign","COSESignatures","payload","signatures","COSESign1","external_aad","external_payload","ptr1","len1","SigStructure","signature","COSESign1Builder","is_payload_external","signed_sig_structure","COSESignBuilder","COSESignature","cose_signature","cose_signatures","EdDSA25519Key","pubkey_bytes","private_key_bytes","HeaderMap","criticality","content_type","init_vector","partial_init_vector","counter_signature","ProtectedHeaderMap","protected_","unprotected_","id","ec_key","curve_type","key_op","PasswordEncryption","data","header_map","PubKeyEncryption","sign_protected","context","body_protected","SignedMessage","cose_sign","cose_sign1","s","tag","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"web3-cardano-token.umd.min.3.js","sourcesContent":["import * as wasm from './emurgo_message_signing_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/**\n*/\nexport const LabelKind = Object.freeze({ Int:0,\"0\":\"Int\",Text:1,\"1\":\"Text\", });\n/**\n*/\nexport const SignedMessageKind = Object.freeze({ COSESIGN:0,\"0\":\"COSESIGN\",COSESIGN1:1,\"1\":\"COSESIGN1\", });\n/**\n*/\nexport const SigContext = Object.freeze({ Signature:0,\"0\":\"Signature\",Signature1:1,\"1\":\"Signature1\",CounterSignature:2,\"2\":\"CounterSignature\", });\n/**\n*/\nexport const CBORSpecialType = Object.freeze({ Bool:0,\"0\":\"Bool\",Float:1,\"1\":\"Float\",Unassigned:2,\"2\":\"Unassigned\",Break:3,\"3\":\"Break\",Undefined:4,\"4\":\"Undefined\",Null:5,\"5\":\"Null\", });\n/**\n*/\nexport const CBORValueKind = Object.freeze({ Int:0,\"0\":\"Int\",Bytes:1,\"1\":\"Bytes\",Text:2,\"2\":\"Text\",Array:3,\"3\":\"Array\",Object:4,\"4\":\"Object\",TaggedCBOR:5,\"5\":\"TaggedCBOR\",Special:6,\"6\":\"Special\", });\n/**\n*/\nexport const AlgorithmId = Object.freeze({\n/**\n*r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n*/\nEdDSA:0,\"0\":\"EdDSA\",\n/**\n*r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n*/\nChaCha20Poly1305:1,\"1\":\"ChaCha20Poly1305\", });\n/**\n*/\nexport const KeyType = Object.freeze({\n/**\n*r\" octet key pair\n*/\nOKP:0,\"0\":\"OKP\",\n/**\n*r\" 2-coord EC\n*/\nEC2:1,\"1\":\"EC2\",Symmetric:2,\"2\":\"Symmetric\", });\n/**\n*/\nexport const ECKey = Object.freeze({ CRV:0,\"0\":\"CRV\",X:1,\"1\":\"X\",Y:2,\"2\":\"Y\",D:3,\"3\":\"D\", });\n/**\n*/\nexport const CurveType = Object.freeze({ P256:0,\"0\":\"P256\",P384:1,\"1\":\"P384\",P521:2,\"2\":\"P521\",X25519:3,\"3\":\"X25519\",X448:4,\"4\":\"X448\",Ed25519:5,\"5\":\"Ed25519\",Ed448:6,\"6\":\"Ed448\", });\n/**\n*/\nexport const KeyOperation = Object.freeze({ Sign:0,\"0\":\"Sign\",Verify:1,\"1\":\"Verify\",Encrypt:2,\"2\":\"Encrypt\",Decrypt:3,\"3\":\"Decrypt\",WrapKey:4,\"4\":\"WrapKey\",UnwrapKey:5,\"5\":\"UnwrapKey\",DeriveKey:6,\"6\":\"DeriveKey\",DeriveBits:7,\"7\":\"DeriveBits\", });\n/**\n*/\nexport class BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nexport class CBORArray {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORArray}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {CBORValue}\n    */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} elem\n    */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORObject {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORObject}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject}\n    */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {CBORValue} key\n    * @param {CBORValue} value\n    * @returns {CBORValue | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORValue} key\n    * @returns {CBORValue | undefined}\n    */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {CBORArray}\n    */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n    * @param {boolean} use_definite\n    */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class CBORSpecial {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORSpecial}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {boolean} b\n    * @returns {CBORSpecial}\n    */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @param {number} u\n    * @returns {CBORSpecial}\n    */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial}\n    */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean | undefined}\n    */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nexport class CBORValue {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {CBORValue}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CBORValue}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {CBORValue}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORArray} arr\n    * @returns {CBORValue}\n    */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORObject} obj\n    * @returns {CBORValue}\n    */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {TaggedCBOR} tagged\n    * @returns {CBORValue}\n    */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {CBORSpecial} special\n    * @returns {CBORValue}\n    */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {CBORArray | undefined}\n    */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n    * @returns {CBORObject | undefined}\n    */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n    * @returns {TaggedCBOR | undefined}\n    */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {CBORSpecial | undefined}\n    */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @param {COSERecipients} recipients\n    * @returns {COSEEncrypt}\n    */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEEncrypt0 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEEncrypt0}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSEEncrypt0}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSEKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSEKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n    * @param {Label} key_type\n    */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n    * @returns {Label}\n    */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} key_ops\n    */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} base_init_vector\n    */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @param {Label} key_type\n    * @returns {COSEKey}\n    */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipient {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipient}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} ciphertext\n    * @returns {COSERecipient}\n    */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext) ? 0 : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSERecipients {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSERecipients}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {COSERecipients}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSERecipient}\n    */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n    * @param {COSERecipient} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class COSESign {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {COSESignatures} signatures\n    * @returns {COSESign}\n    */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESign1}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n    * # Arguments\n    * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n    * @param {Uint8Array | undefined} external_aad\n    * @param {Uint8Array | undefined} external_payload\n    * @returns {SigStructure}\n    */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad) ? 0 : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload) ? 0 : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array | undefined} payload\n    * @param {Uint8Array} signature\n    * @returns {COSESign1}\n    */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload) ? 0 : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESign1Builder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESign1Builder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} signed_sig_structure\n    * @returns {COSESign1}\n    */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} payload\n    * @param {boolean} is_payload_external\n    * @returns {COSESignBuilder}\n    */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /**\n    */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n    * @param {Uint8Array} external_aad\n    */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {SigStructure}\n    */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} signed_sig_structure\n    * @returns {COSESign}\n    */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @returns {Headers}\n    */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Headers} headers\n    * @param {Uint8Array} signature\n    * @returns {COSESignature}\n    */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\n/**\n*/\nexport class COSESignatures {\n\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {COSESignatures}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {COSESignature}\n    */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} elem\n    */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class CounterSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CounterSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignature} cose_signature\n    * @returns {CounterSignature}\n    */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {COSESignatures} cose_signatures\n    * @returns {CounterSignature}\n    */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n    * @returns {COSESignatures}\n    */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\n/**\n*/\nexport class EdDSA25519Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} pubkey_bytes\n    * @returns {EdDSA25519Key}\n    */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} private_key_bytes\n    */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /**\n    */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /**\n    */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n    * @returns {COSEKey}\n    */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/**\n*/\nexport class HeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {Label} algorithm_id\n    */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Labels} criticality\n    */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n    * @returns {Labels | undefined}\n    */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n    * @param {Label} content_type\n    */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n    * @returns {Label | undefined}\n    */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} key_id\n    */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} init_vector\n    */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} partial_init_vector\n    */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {CounterSignature} counter_signature\n    */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n    * @returns {CounterSignature | undefined}\n    */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @returns {CBORValue | undefined}\n    */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {Label} label\n    * @param {CBORValue} value\n    */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n    * @returns {Labels}\n    */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Headers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Headers}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {ProtectedHeaderMap} protected_\n    * @param {HeaderMap} unprotected_\n    * @returns {Headers}\n    */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Label {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Label}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {Label}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {Label}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {string | undefined}\n    */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} id\n    * @returns {Label}\n    */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_type\n    * @returns {Label}\n    */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} ec_key\n    * @returns {Label}\n    */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} curve_type\n    * @returns {Label}\n    */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {number} key_op\n    * @returns {Label}\n    */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\n/**\n*/\nexport class Labels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Labels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {Labels}\n    */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Label}\n    */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n    * @param {Label} elem\n    */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nexport class PasswordEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PasswordEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt0} data\n    * @returns {PasswordEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class ProtectedHeaderMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtectedHeaderMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @param {HeaderMap} header_map\n    * @returns {ProtectedHeaderMap}\n    */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderMap}\n    */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\n/**\n*/\nexport class PubKeyEncryption {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PubKeyEncryption}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n    * @param {COSEEncrypt} data\n    * @returns {PubKeyEncryption}\n    */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SigStructure {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SigStructure}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ProtectedHeaderMap}\n    */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {ProtectedHeaderMap | undefined}\n    */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {ProtectedHeaderMap} sign_protected\n    */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n    * @param {number} context\n    * @param {ProtectedHeaderMap} body_protected\n    * @param {Uint8Array} external_aad\n    * @param {Uint8Array} payload\n    * @returns {SigStructure}\n    */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\n/**\n*/\nexport class SignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SignedMessage}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign} cose_sign\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {COSESign1} cose_sign1\n    * @returns {SignedMessage}\n    */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {SignedMessage}\n    */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {COSESign | undefined}\n    */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n    * @returns {COSESign1 | undefined}\n    */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\n/**\n*/\nexport class TaggedCBOR {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TaggedCBOR}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {CBORValue}\n    */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} tag\n    * @param {CBORValue} value\n    * @returns {TaggedCBOR}\n    */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n","import * as wasm from \"./emurgo_message_signing_bg.wasm\";\nexport * from \"./emurgo_message_signing_bg.js\";","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}